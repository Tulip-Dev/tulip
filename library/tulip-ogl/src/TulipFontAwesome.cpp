/*
 *
 * This file is part of Tulip (http://tulip.labri.fr)
 *
 * Authors: David Auber and the Tulip development Team
 * from LaBRI, University of Bordeaux
 *
 * Tulip is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Tulip is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 */

#include <cassert>
#include <cstring>

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wold-style-cast"
#endif
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

#include <tulip/TulipFontAwesome.h>
#include <tulip/TlpTools.h>

#include <utf8.h>

#include <algorithm>
#include <map>
#include <unordered_map>

using namespace std;

namespace tlp {

static map<std::string, unsigned int> iconCodePoint;
static unordered_map<std::string, const char *> iconFile;
static vector<std::string> iconsNames;

static void addIconCodePoint(const string &fontName, const string &iconName, unsigned int codePoint) {
  string name("fa-");
  name.append(iconName);
  if (fontName == "solid") {
    iconFile[name] = "fa-solid-900";
  } else if (fontName == "regular") {
    if (iconFile.find(name) != iconFile.end())
      name.append("-o");
    iconFile[name] = "fa-regular-400";
  } else if (fontName == "brands") {
      iconCodePoint[name] = codePoint;
      iconFile[name] = "fa-brands-400";
    }
  iconCodePoint[name] = codePoint;
}

// code generated by generate_fa_init_cpp_code.sh
#include "TulipInitFontAwesome.cpp"

std::string TulipFontAwesome::getTTFLocation(const std::string &iconName) {
  if (iconCodePoint.empty())
    initIconCodePoints();
  return string(tlp::TulipBitmapDir).append(iconFile[iconName.c_str()]).append(".ttf");
}

std::string TulipFontAwesome::getWOFF2Location(const std::string &iconName) {
  if (iconCodePoint.empty())
    initIconCodePoints();
  return string(tlp::TulipBitmapDir).append(iconFile[iconName.c_str()]).append(".woff2");
}

bool TulipFontAwesome::isIconSupported(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  return iconCodePoint.find(iconName.c_str()) != iconCodePoint.end();
}

const vector<std::string> &TulipFontAwesome::getSupportedIcons() {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  return iconsNames;
}

unsigned int TulipFontAwesome::getIconCodePoint(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  auto it = iconCodePoint.find(iconName.c_str());

  if (it != iconCodePoint.end())
    return (it->second);

  return 0;
}

std::string TulipFontAwesome::getIconFamily(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  return iconFile[iconName.c_str()];
}

std::string TulipFontAwesome::getIconStyle(const std::string &iconName) {
  auto family = TulipFontAwesome::getIconFamily(iconName);
  if (family == "fa-solid-900")
    return "Solid";
  else
    return "Regular";
}

std::string TulipFontAwesome::getIconUtf8String(const std::string &iconName) {
  if (iconCodePoint.empty()) {
    initIconCodePoints();
  }

  std::string iconString;
  utf8::append(iconCodePoint[iconName.c_str()], back_inserter(iconString));
  return iconString;
}
} // namespace tlp
