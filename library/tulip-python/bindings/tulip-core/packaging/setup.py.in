# Always prefer setuptools over distutils
from setuptools import setup
from setuptools.dist import Distribution
# To use a consistent encoding
from codecs import open
import os
from os import path
import fnmatch
import platform
import subprocess
import sys
import shutil

# On MacOS, we need to relink dylibs and set correct rpaths in
# order for the modules to be imported in a portable way when
# distributed through pip
if platform.system() == 'Darwin' and len(sys.argv) > 1 \
        and sys.argv[1] == 'bdist_wheel':

    def getDyLibDependencies(dylib):
        otool = subprocess.check_output('otool -L %s' % dylib, shell=True)
        if sys.version_info[0] == 3:
            otool = otool.decode('utf-8')
        L = otool.split('\n')[1:-1]
        L = map(lambda d: d[1:].split(' ')[0], L)
        L = filter(lambda d: '/usr/lib' not in d and
                             '/System' not in d and
                             'Python' not in d and
                             '@rpath' not in d, L)
        return set(L)

    def relinkDyLibAndSetRpaths(dylib, rpaths=[]):
        libs = getDyLibDependencies(dylib)
        for L in libs:
            subprocess.call(
                'install_name_tool -change %s @rpath/%s %s 2>/dev/null' %
                (L, os.path.basename(L), dylib),
                shell=True)
        # add rpaths in dylib
        for rpath in rpaths:
            subprocess.call(
                'install_name_tool -add_rpath %s %s 2>/dev/null' %
                (rpath, dylib),
                shell=True)

    def relinkDyLibsInDirAndSetRpaths(dirPath, rpaths):
        for lib in os.listdir(dirPath):
            if not fnmatch.fnmatch(lib, '*.py'):
                libPath = dirPath + lib
                if not os.path.isdir(libPath):
                    relinkDyLibAndSetRpaths(libPath, rpaths)

    def copyDyLibsDependencies(dirPath, relativeCopyPath='./'):
        lastNbProcessed = 0
        toProcess = os.listdir(dirPath)
        while lastNbProcessed == 0 or len(toProcess) > lastNbProcessed:
            for lib in toProcess:
                if not fnmatch.fnmatch(lib, '*.py'):
                    libPath = dirPath + lib
                    if not os.path.isdir(libPath):
                        libs = getDyLibDependencies(libPath)
                        for L in libs:
                            filename = os.path.basename(L)
                            dylibCopy = dirPath + relativeCopyPath + filename
                            if not os.path.isfile(dylibCopy):
                                shutil.copyfile(L, dylibCopy)
                                subprocess.call(
                                    ('install_name_tool -id @rpath/%s %s '
                                     '2>/dev/null') % (filename, dylibCopy),
                                    shell=True)
            lastNbProcessed = len(toProcess)
            toProcess = os.listdir(dirPath)

    tulipNativeLibsPath = os.getcwd() + '/tulip/native/'
    tulipNativePluginsLibsPath = os.getcwd() + '/tulip/native/plugins/'

    print("Copying dylibs dependencies in tulip-python wheel ...")
    copyDyLibsDependencies(tulipNativeLibsPath)
    copyDyLibsDependencies(tulipNativePluginsLibsPath, '../')
    print("Relinking dylibs and setting rpaths in tulip-python wheel ...")
    relinkDyLibsInDirAndSetRpaths(tulipNativeLibsPath, ['@loader_path/'])
    relinkDyLibsInDirAndSetRpaths(tulipNativePluginsLibsPath,
                                  ['@loader_path/..'])


class BinaryDistribution(Distribution):
    def is_pure(self):
        return False

    def has_ext_modules(self):
        return True


tulip_native_libs = []
if platform.system() == 'Windows':
    tulip_native_libs = ['native/*.pyd', 'native/*.dll',
                         'native/plugins/*.dll']
    # on Windows, call a CMake script that will gather all the required DLLs
    # to import the modules and copy them to the wheel native folder
    command = ('"${CMAKE_COMMAND}" -DCWD=%s '
               '-DLIBRARY_PATHS=${CMAKE_LIBRARY_PATH} '
               '-P copyTulipCoreDllDependencies.cmake') % os.getcwd()
    p = subprocess.call(command, shell=True)
elif platform.system() == 'Darwin':
    tulip_native_libs = ['native/*.so', 'native/*.dylib',
                         'native/plugins/*.dylib']
elif platform.system() == 'Linux':
    tulip_native_libs = ['native/*.so*', 'native/plugins/*.so']

here = path.abspath(path.dirname(__file__))

with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name='tulip-python',

    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # https://packaging.python.org/en/latest/single_source_version.html
    version='@TULIP_PYTHON_WHEEL_VERSION@',

    description='Large graphs analysis and drawing',
    long_description=long_description,

    url='http://tulip.labri.fr/',
    project_urls={
        'Documentation': 'http://tulip.labri.fr/Documentation/current/tulip-python/html/index.html',
        'Issue Tracker': 'https://sourceforge.net/p/auber/bugs/',
        'Sources': 'https://github.com/Tulip-dev/tulip',
    },

    author='David Auber and the Tulip development team',
    author_email='tulipdev@labri.fr',

    license='LGPLv3+',

    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Development Status :: 5 - Production/Stable',

        'Intended Audience :: Developers',
        'Intended Audience :: Education',
        'Intended Audience :: Science/Research',

        'Topic :: Scientific/Engineering',
        'Topic :: Scientific/Engineering :: Information Analysis',
        'Topic :: Scientific/Engineering :: Mathematics',
        'Topic :: Scientific/Engineering :: Visualization',

        'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)', # noqa

        'Operating System :: POSIX :: Linux',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Microsoft :: Windows :: Windows 10',
        'Operating System :: Microsoft :: Windows :: Windows 8',
        'Operating System :: Microsoft :: Windows :: Windows 7',

        'Programming Language :: C++',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ],

    keywords='graph theory algorithms visualization',

    packages=['tulip', 'tulip.native', 'tulipplugins'],

    package_data={
        'tulip': tulip_native_libs + ['plugins/color/*',
                                      'plugins/general/*',
                                      'plugins/import/*',
                                      'plugins/layout/H3Layout.py',
                                      'plugins/layout/h3/*'],
    },

    include_package_data=True,
    distclass=BinaryDistribution,
)
