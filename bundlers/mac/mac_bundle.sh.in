#!/bin/sh

function usage {
        echo "Usage : $0 <Bundle Destination Dir> [<Application Name>=Tulip] [<suffix>]"
}

APP_NAME=Tulip

if [ $# -lt 1 ] || [ $# -gt 3 ]
then
    usage $0
    exit 1
elif [ $# -gt 1 ]
then
    APP_NAME=$2
    if [ $# -eq 3 ]
    then
	SUFFIX=-$3
    fi
fi

TULIP_DIR=@CMAKE_INSTALL_PREFIX@
DEST_DIR=$1
SRC_DIR=@tulip_SOURCE_DIR@/bundlers/mac
PYTHON_BUILD=@TULIP_BUILD_PYTHON_COMPONENTS@
QT_BINARY_DIR=@QT_BINARY_DIR@
AROBASE=$(printf "\\100")

if [ "${QT_BINARY_DIR}" = "" ]
then
    QT_BINARY_DIR=@_qt5Gui_install_prefix@/bin
fi

if [ ! -d ${TULIP_DIR} ]
then
    echo "Error : the specified Tulip installation directory does not exist"
    exit 1
fi

echo "Wiping previous bundles into ${DEST_DIR}"
rm -rf "${DEST_DIR}/application" 2>/dev/null
rm -f "${DEST_DIR}/${APP_NAME}-@TulipVersion@.dmg" 2>/dev/null
mkdir -p "${DEST_DIR}/application"
cd "${DEST_DIR}/application"
mkdir .background
cp "${SRC_DIR}/background.png" .background/
rm -rf * 2>/dev/null

echo 'Creating base directories'
cd "${DEST_DIR}/application"
mkdir -p Tulip.app/Contents/{MacOS,Resources,Frameworks}
cd Tulip.app/Contents
cp "${SRC_DIR}/tulip.icns" Resources/
sed -e s"/TLP_VERSION/@TulipVersion@/g" "${SRC_DIR}/Info.plist" > Info.plist

echo 'Copying binaries & libraries'
cd "${DEST_DIR}/application/Tulip.app/Contents/"
cp -r "${TULIP_DIR}"/* .
mv lib/*.dylib Frameworks/
rm -rf include
rm -rf lib/cmake
if [ -d lib/tulip/python ]
then
    find lib/tulip/python  \( -name '*.pyc' -o -name '*.pyo' \) | xargs rm -rf
fi

if [ "$PYTHON_BUILD" = "ON" ]  && [ -d @PYTHON_DIR_PATH@ ]
then
echo 'Copying Python Framework'
mkdir -p Frameworks/Python.framework/Versions
cp -a @PYTHON_DIR_PATH@ Frameworks/Python.framework/Versions
find Frameworks/Python.framework \( -name '*.pyc' -o -name '*.pyo' \) | xargs rm -rf
fi

echo 'Copying license'
cd "${DEST_DIR}/application"
cp "${SRC_DIR}/../../COPYING.LESSER" .

QT_LIB_DIR="@QT_QTCORE_LIBRARY@/.."
echo 'Copying Resources'
cd "${DEST_DIR}/application/Tulip.app/Contents/Frameworks/"
cp -r "${QT_LIB_DIR}/QtGui.framework/Resources/qt_menu.nib" ../Resources 2>/dev/null
cp "@QT_QTCLUCENE_LIBRARY@" . 2>/dev/null

# use macdeployqt to configure exe & libraries
cd ..
# configure tulip & tulip_perspective
mv bin/tulip MacOS/Tulip
# run macdeployqt with tulip_perspective as an other executable to update
# but also the Tulip Python dynamic modules (not processed by macdeployqt as
# they are suffixed by .so instead of .dylib)
if [ "$PYTHON_BUILD" = "ON" ]
then
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Tulip.app -executable=${DEST_DIR}/application/Tulip.app/Contents/bin/tulip_perspective -executable=${DEST_DIR}/application/Tulip.app/Contents/lib/tulip/python/tulip/native/_tulip.so -executable=${DEST_DIR}/application/Tulip.app/Contents/lib/tulip/python/tulipgui/native/_tulipgui.so
# ensure embedded python framework will be found
# when loading all libs related to python
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/perspective/libGraphPerspective-*.dylib
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/libtulip-python-*.dylib
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/_tulip.so
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/sip.so
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/_stl.so
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}loader_path/../../../../../Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Python ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulipgui/native/_tulipgui.so
# do the same for the python embedded executable, application
# to ensure they can be used safely to install
# the external modules needed by the user
install_name_tool -change @PYTHON_DIR_PATH@/Python ${AROBASE}executable_path/../Python ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/bin/python@PYTHON_VERSION@
install_name_tool -change @PYTHON_DIR_PATH@/Python @executable_path/../../../../Python ${DEST_DIR}/application/Tulip*.app/Contents/Frameworks/Python.framework/Versions/@PYTHON_VERSION@/Resources/Python.app/Contents/MacOS/Python
# ensure libomp will also be found
install_name_tool -change /opt/local/lib/libomp/libomp.dylib ${AROBASE}loader_path/../../../../../Frameworks/libomp.dylib ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/sip.so
install_name_tool -change /opt/local/lib/libomp/libomp.dylib ${AROBASE}loader_path/../../../../../Frameworks/libomp.dylib ${DEST_DIR}/application/Tulip*.app/Contents/lib/tulip/python/tulip/native/_stl.so
else
${QT_BINARY_DIR}/macdeployqt ${DEST_DIR}/application/Tulip.app -executable=${DEST_DIR}/application/Tulip.app/Contents/bin/tulip_perspective
fi
mv MacOS/Tulip bin/tulip
# rename
mv ${DEST_DIR}/application/Tulip.app ${DEST_DIR}/application/${APP_NAME}-@TulipVersion@${SUFFIX}.app

# create launcher
cat > MacOS/Tulip <<EOF
#!/bin/sh

wd="\${0%/*}"
cd "\$wd/.."

export DYLD_FRAMEWORK_PATH="\$(pwd)/Frameworks"
export DYLD_FALLBACK_LIBRARY_PATH="\$(pwd)/Frameworks"
export QT_QPA_PLATFORM_PLUGIN_PATH="\$(pwd)/PlugIns/platforms"
export QT_PLUGIN_PATH="\$(pwd)/PlugIns"
if [ -d ./Frameworks/Python.framework/Versions ]; then
# ensure pip external modules can be installed and used through the gui
  PY_VERSION=\$(ls ./Frameworks/Python.framework/Versions)
  export PATH="\$(pwd)/Frameworks/Python.framework/Versions/\$PY_VERSION/bin:\$PATH"
  export DYLD_LIBRARY_PATH="\$(pwd)/Frameworks/Python.framework/Versions/\$PY_VERSION/lib"
fi

# ensure execution of tulip_perspective will not be blocked
xattr -d com.apple.quarantine ./bin/tulip_perspective
# QTBUG-87014 workaround
export QT_MAC_WANTS_LAYER=1
"\$(pwd)"/bin/tulip

EOF
# make it executable
chmod +x MacOS/Tulip

# create perpective launchers
# needed to launch perspective on Big Sur
cat > bin/terminal_launch_perspective <<EOF
#!/bin/bash
cmd="tell application \"Terminal\" to do script \"\${0%/*}/launch_perspective "
for arg in "\$@"; do
  arg="\${arg//\\\\/\\\\\\\}"
  cmd="\$cmd \\\\\"\${arg//\"/\\\\\"}\\\\\""
done

osascript -e "\$cmd\""

EOF
cat > bin/launch_perspective <<EOF
#!/bin/bash
# QTBUG-87014 workaround
export QT_MAC_WANTS_LAYER=1
\${0%/*}/tulip_perspective "\$@"
osascript -e 'tell application "Terminal" to close first window' & exit

EOF

# make them executable
chmod +x bin/*launch_perspective

if [ "$PYTHON_BUILD" = "ON" ]
then
# create pip external modules installer
   cat > bin/pip_install <<EOF
#!/bin/bash
wd="\${0%/*}"
cd "\$wd/.."
PY_VERSION=\$(ls ./Frameworks/Python.framework/Versions)
export PATH="\$(pwd)/Frameworks/Python.framework/Versions/\$PY_VERSION/bin:\$PATH"
export DYLD_LIBRARY_PATH="\$(pwd)/Frameworks/Python.framework/Versions/\$PY_VERSION/lib"
python3 -m pip install --user \$1
EOF
# make it executable
  chmod +x bin/pip_install
fi

# generate dmg
echo 'Generating DMG'
cd "${DEST_DIR}"
sh "${SRC_DIR}/make_dmg.sh" ${APP_NAME} "@TulipVersion@${SUFFIX}" "${DEST_DIR}/application"

# rename dmg if needed
if [ "$PYTHON_BUILD" = "ON" ]
then
  DMG_NAME="${APP_NAME}-@TulipVersion@${SUFFIX}_qt@QT_VERSION@_py@PYTHON_VERSION@.dmg"
else
  DMG_NAME="${APP_NAME}-@TulipVersion@${SUFFIX}_qt@QT_VERSION@_no_python.dmg"
fi
echo "${DMG_NAME} has been correctly generated in ${DEST_DIR}"
mv ${APP_NAME}-@TulipVersion@${SUFFIX}.dmg ${DMG_NAME}
