#!/bin/bash

# This script is centos 6.8 specific:
# it intends to create a tulip bundle suitable to build a portable app
# (using AppImageKit) runable on most linux distributions

TULIP_INSTALL_DIR=@CMAKE_INSTALL_PREFIX@
OUTPUT_DIR=/tmp
PERSPECTIVE=Tulip
QMAKE=@QT_QMAKE_EXECUTABLE@

usage()
{
  echo "Usage: $(basename $0) [OPTIONS]"
  cat <<EOF
Options:
  --appdir <dir> (indicate the directory where the Tulip.AppDir will be created, default is /tmp)
  --perspective <name> (indicate the perspective the AppImage will launch, default is Tulip)
EOF
  exit $1
}

while test $# -gt 0; do
  case $1 in
    --appdir)
      shift
      OUTPUT_DIR=$1
      ;;
    --perspective)
      shift
      PERSPECTIVE=$1
      ;;
    --help)
      usage 0
      ;;
    *)
      usage 1
      ;;
  esac
  shift
done

BUNDLE_DIR=$OUTPUT_DIR/$PERSPECTIVE.AppDir

# if BUNDLE_DIR already exists
# remove it
if [ -d $BUNDLE_DIR ]; then
  rm -rf $BUNDLE_DIR
fi

# create BUNDLE_DIR
mkdir $BUNDLE_DIR
BUNDLE_BIN_DIR=$BUNDLE_DIR/usr/bin
mkdir -p $BUNDLE_BIN_DIR
BUNDLE_LIB_DIR=$BUNDLE_DIR/usr/lib
mkdir -p $BUNDLE_LIB_DIR
BUNDLE_SHARE_DIR=$BUNDLE_DIR/usr/share
mkdir -p $BUNDLE_SHARE_DIR
BUNDLE_USR_DIR=$BUNDLE_DIR/usr

# create AppRun executable file
APPRUN_FILE=$BUNDLE_DIR/AppRun
echo "#!/bin/sh" > $APPRUN_FILE
echo "BUNDLE_DIR=\"\$(dirname \$0)\"" >> $APPRUN_FILE
echo "export TLP_DIR=\${BUNDLE_DIR}/usr/lib" >> $APPRUN_FILE
# do not set LD_LIBRARY_PATH to ensure a successful launch
# of the default web browser to show the Tuip documentation
#echo "export LD_LIBRARY_PATH=\${TLP_DIR}:\${LD_LIBRARY_PATH}" >> $APPRUN_FILE
echo "export PYTHONHOME=\${BUNDLE_DIR}/usr" >> $APPRUN_FILE
echo "\${BUNDLE_DIR}/usr/bin/tulip_perspective -p $PERSPECTIVE -style plastique" >> $APPRUN_FILE
chmod 755 $APPRUN_FILE

# create desktop file
DESKTOP_FILE=$BUNDLE_DIR/tulip.desktop
echo "[Desktop Entry]" > $DESKTOP_FILE
echo "Name=Tulip" >> $DESKTOP_FILE
echo "Type=Application" >> $DESKTOP_FILE
echo "Exec=tulip_perspective" >> $DESKTOP_FILE
echo "Icon=Tulip" >> $DESKTOP_FILE
echo "Categories=Science;" >> $DESKTOP_FILE

# copy Tulip.png
cp @tulip_SOURCE_DIR@/bundlers/linux/Tulip.png $BUNDLE_DIR

# copy tulip_perspective exe
cp -v -p $TULIP_INSTALL_DIR/bin/tulip_perspective $BUNDLE_BIN_DIR
# copy all lib and share installed files (no include)
echo "copying $TULIP_INSTALL_DIR/lib files into $BUNDLE_LIB_DIR"
cp -Rp $TULIP_INSTALL_DIR/@CMAKE_INSTALL_LIBDIR@/* $BUNDLE_LIB_DIR
echo "copying $TULIP_INSTALL_DIR/share files into $BUNDLE_SHARE_DIR"
cp -Rp $TULIP_INSTALL_DIR/share $BUNDLE_USR_DIR

# remove not needed files
rm -rf $BUNDLE_LIB_DIR/tulip/cmake
rm -rf $BUNDLE_SHARE_DIR/tulip/doc/doxygen

# add qt plugins directory
mkdir $BUNDLE_BIN_DIR/plugins
cp -v -Rp @QT_PLUGINS_DIR@/imageformats $BUNDLE_BIN_DIR/plugins

# set up LD_LIBRARY_PATH with the installation path of the Qt libs used
export LD_LIBRARY_PATH=$(${QMAKE} -query QT_INSTALL_LIBS):${LD_LIBRARY_PATH}

# copy tulip_perspective needed libs
pushd $BUNDLE_DIR > /dev/null 2>&1
ldd $BUNDLE_BIN_DIR/tulip_perspective | grep "=> /" | awk '{print $3}' | grep -v tulip | xargs -I '{}' cp -v '{}' ./usr/lib || true
popd > /dev/null 2>&1

# extend LD_LIBRARY_PATH to ensure PYTHON_LIBRARY can be found
# even if a non standard installation is in use
export LD_LIBRARY_PATH=$(dirname @PYTHON_LIBRARY@):$LD_LIBRARY_PATH

# add Python environment
PYTHON_LIB=$(ldd $(ls $BUNDLE_LIB_DIR/libtulip-python*) | grep libpython | awk '{print $3}')
# we need to create a symlink as the libtulip-python*.so
# performs a dlopen on libpythonX.Y.so when it is loaded
if [ "$PYTHON_LIB" != "" ]; then
  cp -v --preserve=mode $PYTHON_LIB $BUNDLE_LIB_DIR
  PYTHON_LIB_NAME=$(basename $PYTHON_LIB)
  PYTHON_LIB_SYMLINK_NAME=$(echo $PYTHON_LIB | sed 's/^.*libpython\(.*\.so\).*$/libpython\1/')
  ln -s $BUNDLE_LIB_DIR/$PYTHON_LIB_NAME $BUNDLE_LIB_DIR/$PYTHON_LIB_SYMLINK_NAME
  PYTHON_PACKAGE_DIR=$(echo $PYTHON_LIB | sed 's/^.*libpython\(.*\).so.*$/python\1/')
  PYTHON_PACKAGE_DIR=${PYTHON_PACKAGE_DIR:0:9}
  PYTHON_PACKAGE_BUNDLE_DIR=$BUNDLE_LIB_DIR/$PYTHON_PACKAGE_DIR/
  mkdir -p $PYTHON_PACKAGE_BUNDLE_DIR
  pushd $(dirname $PYTHON_LIB)/$PYTHON_PACKAGE_DIR > /dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "$(dirname $PYTHON_LIB)/$PYTHON_PACKAGE_DIR does not exist"
    exit
  fi
  echo "copying $(dirname $PYTHON_LIB)/$PYTHON_PACKAGE_DIR files into $PYTHON_PACKAGE_BUNDLE_DIR"
  find . \( -type f \) \( ! -name "*.pyc" \) \( ! -name "*.pyo" \) -exec cp --parents --preserve=mode {} $PYTHON_PACKAGE_BUNDLE_DIR \;
  popd > /dev/null 2>&1
fi

function copy_to_usr_lib() {
  LIB_TO_COPY=$1
  if [ ! -e $BUNDLE_LIB_DIR/$(basename $LIB_TO_COPY) ]; then
    cp -v --preserve=mode $LIB_TO_COPY $BUNDLE_LIB_DIR
  fi
}

# copy other common libs needed by plugins
for PLUGIN in $(find $BUNDLE_LIB_DIR/tulip -name "*.so")
do
  echo "Search dependencies for $(basename $PLUGIN)"
  for LIB in $(ldd $PLUGIN | grep "=> /" | awk '{print $3}')
  do
    copy_to_usr_lib $LIB
  done;
done;

pushd $BUNDLE_LIB_DIR > /dev/null 2>&1
# remove unneeded libs
LIBS=$(ls libc.* libdbus*.* libdl.* libdrm.* libexpat.* libfontconfig.* libglib-*.* libgobject-*.* libgcc_s.* libGL.* libm.* libnsl.* libpthread.* libresolv.* librt.* libstdc++.* libutil.*  libuuid.* libxcb*.* libX*.* libz.* 2> /dev/null)
if [ "$LIBS" != "" ]; then
  rm $LIBS
fi

# copy some missing libs
ls libffi.so* > /dev/null 2>&1
if [ ! $? -eq 0 ]; then
  cp -v --preserve=mode $(/sbin/ldconfig -p | grep libffi.so | cut -d ">" -f 2 | xargs) .
fi
popd > /dev/null 2>&1

# create a symbolic link lib64 pointing to lib in $BUNDLE_DIR/usr
# in order for Python to find its standard library on a x86_64 AppImage
pushd $BUNDLE_USR_DIR > /dev/null 2>&1
ln -s lib @CMAKE_INSTALL_LIBDIR@ 2>/dev/null
popd > /dev/null 2>&1

# tweak OS/ABI header part of libraries (System V instead of Linux)
for LIB in $(find $BUNDLE_LIB_DIR -name '*.so*')
do
  # LIB may be in read only mode, make it writable before stripping it 
  chmod +w $LIB
  strip --strip-unneeded $LIB
done;
