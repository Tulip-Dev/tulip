# Tulip continuous integration on Linux and Mac OS platforms through TravisCI.
# Two type of builds are performed by os:
#  - a "legacy" Tulip build using default system compiler (GCC 4.8 on Linux, clang 3.5 on Mac OS), C++11 standard Qt 4.8 and Python 2.7
#  - a "modern" Tulip build using a recent compiler (GCC 7.1 on linux, clang from XCode9 on Mac OS), C++11 standard, 
#    Qt 5.9 on Linux / Qt 5.8 on Mac OS, and Python 3.6 on Linux / Python 2.7 on Mac OS
# As TravisCI limits build jobs to 45 minutes timeout, we build Tulip in two successive build stages:
#  - a core build with no Tulip OpenGL and Qt components
#  - a complete build including OpenGL and Qt components
# The trick is to use travis build cache and ccache to cache already compiled object files between stages
# and thus not exceeding Travis build timeout limits (which systematically happens 
# before when compiling Tulip on MacOS with C++11 standard activated).

# inform travis that we are building a cpp project
language: cpp

# send build status notifications to tulipdev mailing list
notifications:
  email:
    - tulipdev@labri.fr

# define build jobs
jobs:
  include:
  #==============================================================================================================================================================
    # Tulip core build stage on Linux
    - stage: Tulip core build (Linux)
    # legacy Tulip core build on Linux
      os: linux
      dist: trusty
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Tulip build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            # the dependencies below are not required for a Tulip core build but travis build cache does not work
            # as expected in the complete build stage that follows (due to cache slug depending on the environment),
            # so install them anyway
            - libqt4-dev
            - libquazip-dev
            - libqtwebkit-dev
            - libglew-dev
            - libpng-dev
            - libjpeg-dev
            - libfreetype6-dev
            - python-pip
      install:
        # install sphinx in order to have the same build environment as in the complete build (for cache slug)
        - sudo pip install sphinx
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip core build with cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DTULIP_BUILD_CORE_ONLY=ON -DTULIP_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests

    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    # modern Tulip core build on Linux
    -
      os: linux
      dist: trusty
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # we get GCC 7.x and Python 3.6 from external ppas
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
          # install Tulip build dependencies
          packages:
            - g++-7
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3.6
            - libpython3.6-dev
            - libcppunit-dev
            - binutils-dev
            # the dependencies below are not required for a Tulip core build but travis build cache does not work
            # as expected in the complete build stage that follows (as cache slug depends on the environment),
            # so install them anyway
            - libglew-dev
            - libpng-dev
            - libjpeg-dev
            - libfreetype6-dev
      before_install:
        # set up external ppa for Qt 5.9 not registered in travis
        - sudo add-apt-repository -y ppa:beineri/opt-qt594-trusty
        # update packages list
        - sudo apt-get -qy update
        # force the use of GCC 7
        - eval "${MATRIX_EVAL}"
      install:
        # install Qt 5.9 from external ppa (not required for this build though but needed for travis build cache to work correctly between builds stages)
        - sudo apt-get -qy install qt59-meta-minimal qt59webengine
      env:
        # use Python 3.6
        - PYTHON_EXECUTABLE=/usr/bin/python3.6
        # use GCC 7
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip core build with cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DTULIP_BUILD_CORE_ONLY=ON -DTULIP_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests

  #==============================================================================================================================================================
    # Tulip complete build stage on Linux
    - stage: Tulip complete build (Linux)
      # legacy Tulip complete build on Linux, we also build the documentation in this one
      os: linux
      dist: trusty
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # install Tulip build dependencies
          packages:
            - cmake
            - ccache
            - ninja-build
            - python-pip
            - doxygen
            - graphviz
            - libqhull-dev
            - libyajl-dev
            - libpython2.7-dev
            - libcppunit-dev
            - binutils-dev
            - libqt4-dev
            - libquazip-dev
            - libqtwebkit-dev
            - libglew-dev
            - libpng-dev
            - libjpeg-dev
            - libfreetype6-dev
      install:
        # install latest sphinx version for generating the documentation
        - sudo pip install sphinx
      env:
        # use Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      before_script:
        # run xvfb to simulate a display (needed to instantiate a QApplication for unit tests)
        - "export DISPLAY=:99.0"
        - "sh -e /etc/init.d/xvfb start"
        - sleep 3 # give xvfb some time to start
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip complete build with cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH} -DTULIP_USE_QT5=${TULIP_USE_QT5} -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_BUILD_DOC=ON -DTULIP_USE_CCACHE=ON -DTULIP_PYTHON_SITE_INSTALL=ON || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests

    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    # modern Tulip complete build on Linux
    -
      os: linux
      dist: trusty
      compiler: gcc
      cache: ccache
      addons:
        apt:
          # we get GCC 7.x and Python 3.6 from external ppas
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
          # install Tulip build dependencies
          packages:
            - g++-7
            - cmake
            - ccache
            - ninja-build
            - libqhull-dev
            - libyajl-dev
            - python3.6
            - libpython3.6-dev
            - libcppunit-dev
            - binutils-dev
            - libglew-dev
            - libpng-dev
            - libjpeg-dev
            - libfreetype6-dev
      before_install:
        # set up external ppa for Qt 5.9 not registered in travis
        - sudo add-apt-repository -y ppa:beineri/opt-qt594-trusty
        # update packages list
        - sudo apt-get -qy update
        # force the use of GCC 7
        - eval "${MATRIX_EVAL}"
      install:
        # install Qt 5.9 from external ppa
        - sudo apt-get -qy install qt59-meta-minimal qt59webengine
      env:
        # use Python 3.6
        - PYTHON_EXECUTABLE=/usr/bin/python3.6
        # use GCC 7
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
      before_script:
        # run xvfb to simulate a display (needed to instantiate a QApplication for unit tests)
        - "export DISPLAY=:99.0"
        - "sh -e /etc/init.d/xvfb start"
        - sleep 3 # give xvfb some time to start
      script:
        # create build directoty
        - mkdir build && cd build
        # configure Tulip complete build using cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/opt/qt59/ -DTULIP_USE_QT5=ON -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_BUILD_DOC=OFF -DTULIP_USE_CCACHE=ON -DTULIP_PYTHON_SITE_INSTALL=ON  || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4  || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests

  #==============================================================================================================================================================
    # Tulip AppImage build on CentOS
    - stage: Tulip AppImage build (CentOS)
      # Tulip x86_64 AppImage build on CentOS 6
      os: linux
      dist: trusty
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=x86_64
        - DOCKER_IMAGE=centos:6

      services:
        - docker

      before_install:
        - echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
        - sudo service docker restart
        - sleep 5
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache --cap-add SYS_ADMIN --device /dev/fuse:/dev/fuse:mrw --rm=true -v `pwd`:/tulip:rw ${DOCKER_IMAGE} /bin/bash -c "bash -xe /tulip/bundlers/linux/tulip_appimage_centos6_build.sh"

    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    -
      # Tulip i686 AppImage build on CentOS 6
      os: linux
      dist: trusty
      cache:
        directories:
          - $HOME/ccache

      sudo: required
      env:
        - ARCH=i686
        - DOCKER_IMAGE=toopher/centos-i386:centos6

      services:
        - docker

      before_install:
        - echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
        - sudo service docker restart
        - sleep 5
        - sudo docker pull ${DOCKER_IMAGE}
        - sudo docker create -v $HOME/ccache:/ccache --name ccache ${DOCKER_IMAGE}

      script:
        - sudo docker run --rm=true -e CCACHE_DIR=/ccache --volumes-from ccache --cap-add SYS_ADMIN --device /dev/fuse:/dev/fuse:mrw --rm=true -v `pwd`:/tulip:rw ${DOCKER_IMAGE} /bin/bash -c "bash -xe /tulip/bundlers/linux/tulip_appimage_centos6_build.sh"

  #==============================================================================================================================================================
    # Tulip core build stage on Mac OS
    - stage: Tulip core build (Mac OS)
    # legacy Tulip core build on Mac OS
      os: osx
      osx_image: xcode7.3
      compiler: clang
      cache: ccache
      install:
        # set columns in terminal, required for curl to work correctly:
        - export COLUMNS=80
        # install MacPorts in order to easily retrieve Tulip dependencies
        - wget https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - chmod +x ./macports-ci
        - travis_wait ./macports-ci install
        - export PATH=/opt/local/bin:/opt/local/libexec/qt4/bin:$PATH
        # install Tulip core build dependencies
        - sudo port -N install cmake
        - sudo port -N install ccache
        - sudo port -N install ninja
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install autoconf
        - sudo port -N install automake
        - sudo port -N install libtool
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit

      env:
        # use system Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip core build using cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DTULIP_BUILD_CORE_ONLY=ON || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests
    
    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    # modern Tulip core build on Mac OS
    -
      os: osx
      # use xcode9 travis image to get a recent clang compiler
      osx_image: xcode9
      compiler: clang
      cache: ccache
      install:
        # set columns in terminal, required for curl to work correctly:
        - export COLUMNS=80
        # install MacPorts in order to easily retrieve Tulip dependencies
        - wget https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - chmod +x ./macports-ci
        - travis_wait ./macports-ci install
        - export PATH=/opt/local/bin:/opt/local/libexec/qt4/bin:$PATH
        # install Tulip core build dependencies
        - sudo port -N install cmake
        - sudo port -N install ccache
        - sudo port -N install ninja
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit
      env:
        # use system Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
        
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip core build using cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DTULIP_BUILD_CORE_ONLY=ON || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - sudo ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests
    
  #==============================================================================================================================================================
    # Tulip complete build stage on Mac OS
    - stage: Tulip complete build (Mac OS)
    # legacy Tulip complete build on Mac OS
      os: osx
      osx_image: xcode7.3
      compiler: clang
      cache: ccache
      install:
        # set columns in terminal, required for curl to work correctly:
        - export COLUMNS=80
        # install MacPorts in order to easily retrieve Tulip build dependencies
        - wget https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - chmod +x ./macports-ci
        - travis_wait ./macports-ci install
        - export PATH=/opt/local/bin:/opt/local/libexec/qt4/bin:$PATH
        # install Tulip complete build dependencies
        - sudo port -N install cmake
        - sudo port -N install ccache
        - sudo port -N install ninja
        - sudo port -N install qt4-mac
        - sudo port -N install freetype
        - sudo port -N install glew
        - sudo port -N install libpng
        - sudo port -N install jpeg
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install autoconf
        - sudo port -N install automake
        - sudo port -N install libtool
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit
        - curl -O https://bootstrap.pypa.io/get-pip.py
        - sudo python get-pip.py
        - sudo pip install sphinx==1.7.9

      env:
        # use system Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip complete build using cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH} -DTULIP_USE_QT5=${TULIP_USE_QT5} -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DZLIB_INCLUDE_DIR=/opt/local/include -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib -DPNG_INCLUDE_DIR=/opt/local/include -DPNG_LIBRARY_RELEASE=/opt/local/lib/libpng.dylib -DJPEG_INCLUDE_DIR=/opt/local/include -DJPEG_LIBRARY=/opt/local/lib/libjpeg.dylib || travis_terminate 1
        # compile Tulip using ninja for faster builds
        - ninja -j4 || travis_terminate 1
        - ninja -j4 install || travis_terminate 1
        # run Tulip unit tests
        - ninja runTests || travis_terminate 1
        # build Tulip bundle
        - ninja bundle
    
    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    # modern Tulip complete build on Mac OS
    - 
      os: osx
      # use xcode9 travis image to get a recent clang compiler
      osx_image: xcode9
      compiler: clang
      cache: ccache
      install:
        # set columns in terminal, required for curl to work correctly:
        - export COLUMNS=80
        # install MacPorts in order to easily retrieve Tulip dependencies
        - wget https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
        - chmod +x ./macports-ci
        - travis_wait ./macports-ci install
        - export PATH=/opt/local/bin:/opt/local/libexec/qt4/bin:$PATH
        # install Tulip complete build dependencies
        - sudo port -N install cmake
        - sudo port -N install ccache
        - sudo port -N install ninja
        - sudo port -N install qt5-qtbase
        - sudo port -N install qt5-qttools
        - sudo port -N install qt5-qtwebkit
        - sudo port -N install freetype
        - sudo port -N install glew
        - sudo port -N install libpng
        - sudo port -N install jpeg
        - sudo port -N install qhull
        - sudo port -N install yajl
        - sudo port -N install pkgconfig
        - sudo port -N install cppunit
        - curl -O https://bootstrap.pypa.io/get-pip.py
        - sudo python get-pip.py
        - sudo pip install sphinx==1.7.9 --ignore-installed six
      env:
        # use system Python 2.7
        - PYTHON_EXECUTABLE=/usr/bin/python2.7
        
      script:
        # create build directory
        - mkdir build && cd build
        # configure Tulip complete build using cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DTULIP_USE_QT5=ON -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON -DZLIB_INCLUDE_DIR=/opt/local/include -DZLIB_LIBRARY_RELEASE=/opt/local/lib/libz.dylib -DPNG_INCLUDE_DIR=/opt/local/include -DPNG_LIBRARY_RELEASE=/opt/local/lib/libpng.dylib -DJPEG_INCLUDE_DIR=/opt/local/include -DJPEG_LIBRARY=/opt/local/lib/libjpeg.dylib
        # compile Tulip using ninja for faster builds
        - ninja -j4
        - ninja -j4 install
        # run Tulip unit tests
        - ninja runTests
        # build Tulip bundle
        - ninja bundle
